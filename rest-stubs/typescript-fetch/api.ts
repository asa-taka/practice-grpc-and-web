/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * todo.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RecordStatus {
    TODO = <any> 'STATUS_TODO',
    INPROGRESS = <any> 'STATUS_INPROGRESS',
    DONE = <any> 'STATUS_DONE'
}

/**
 * 
 * @export
 * @interface TodoCreateRequest
 */
export interface TodoCreateRequest {
    /**
     * 
     * @type {TodoRecordInput}
     * @memberof TodoCreateRequest
     */
    record?: TodoRecordInput;
}

/**
 * 
 * @export
 * @interface TodoGetResponse
 */
export interface TodoGetResponse {
    /**
     * 
     * @type {TodoRecord}
     * @memberof TodoGetResponse
     */
    record?: TodoRecord;
}

/**
 * 
 * @export
 * @interface TodoMutateResponse
 */
export interface TodoMutateResponse {
    /**
     * 
     * @type {TodoRecord}
     * @memberof TodoMutateResponse
     */
    record?: TodoRecord;
}

/**
 * 
 * @export
 * @interface TodoQueryRequest
 */
export interface TodoQueryRequest {
    /**
     * 
     * @type {Date}
     * @memberof TodoQueryRequest
     */
    start?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TodoQueryRequest
     */
    end?: Date;
}

/**
 * 
 * @export
 * @interface TodoRecord
 */
export interface TodoRecord {
    /**
     * 
     * @type {number}
     * @memberof TodoRecord
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TodoRecord
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof TodoRecord
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof TodoRecord
     */
    detail?: string;
    /**
     * 
     * @type {Date}
     * @memberof TodoRecord
     */
    deadline?: Date;
    /**
     * 
     * @type {RecordStatus}
     * @memberof TodoRecord
     */
    status?: RecordStatus;
}

/**
 * 
 * @export
 * @interface TodoRecordInput
 */
export interface TodoRecordInput {
    /**
     * 
     * @type {number}
     * @memberof TodoRecordInput
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TodoRecordInput
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof TodoRecordInput
     */
    detail?: string;
    /**
     * 
     * @type {Date}
     * @memberof TodoRecordInput
     */
    deadline?: Date;
}

/**
 * 
 * @export
 * @interface TodoUpdateRequest
 */
export interface TodoUpdateRequest {
    /**
     * 
     * @type {TodoRecordInput}
     * @memberof TodoUpdateRequest
     */
    record?: TodoRecordInput;
    /**
     * 
     * @type {number}
     * @memberof TodoUpdateRequest
     */
    id?: number;
}


/**
 * TodoServiceApi - fetch parameter creator
 * @export
 */
export const TodoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TodoCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo(body: TodoCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTodo.');
            }
            const localVarPath = `/v1/todo/records`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TodoCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTodo.');
            }
            const localVarPath = `/v1/todo/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTodo.');
            }
            const localVarPath = `/v1/todo/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTodo(options: any = {}): FetchArgs {
            const localVarPath = `/v1/todo/records`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TodoUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(id: number, body: TodoUpdateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTodo.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTodo.');
            }
            const localVarPath = `/v1/todo/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TodoUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoServiceApi - functional programming interface
 * @export
 */
export const TodoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TodoCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo(body: TodoCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TodoMutateResponse> {
            const localVarFetchArgs = TodoServiceApiFetchParamCreator(configuration).createTodo(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TodoMutateResponse> {
            const localVarFetchArgs = TodoServiceApiFetchParamCreator(configuration).deleteTodo(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TodoGetResponse> {
            const localVarFetchArgs = TodoServiceApiFetchParamCreator(configuration).getTodo(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTodo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TodoQueryRequest> {
            const localVarFetchArgs = TodoServiceApiFetchParamCreator(configuration).queryTodo(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TodoUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(id: number, body: TodoUpdateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TodoMutateResponse> {
            const localVarFetchArgs = TodoServiceApiFetchParamCreator(configuration).updateTodo(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TodoServiceApi - factory interface
 * @export
 */
export const TodoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {TodoCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo(body: TodoCreateRequest, options?: any) {
            return TodoServiceApiFp(configuration).createTodo(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: number, options?: any) {
            return TodoServiceApiFp(configuration).deleteTodo(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(id: number, options?: any) {
            return TodoServiceApiFp(configuration).getTodo(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTodo(options?: any) {
            return TodoServiceApiFp(configuration).queryTodo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TodoUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(id: number, body: TodoUpdateRequest, options?: any) {
            return TodoServiceApiFp(configuration).updateTodo(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * TodoServiceApi - object-oriented interface
 * @export
 * @class TodoServiceApi
 * @extends {BaseAPI}
 */
export class TodoServiceApi extends BaseAPI {
    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public createTodo(body: TodoCreateRequest, options?: any) {
        return TodoServiceApiFp(this.configuration).createTodo(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public deleteTodo(id: number, options?: any) {
        return TodoServiceApiFp(this.configuration).deleteTodo(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public getTodo(id: number, options?: any) {
        return TodoServiceApiFp(this.configuration).getTodo(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public queryTodo(options?: any) {
        return TodoServiceApiFp(this.configuration).queryTodo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} id 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public updateTodo(id: number, body: TodoUpdateRequest, options?: any) {
        return TodoServiceApiFp(this.configuration).updateTodo(id, body, options)(this.fetch, this.basePath);
    }

}

